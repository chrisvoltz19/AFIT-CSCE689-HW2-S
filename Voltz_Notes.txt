Questions:
-) if i change format from <username>\n<password><salt>\n to <username>\n<password>\n<salt>\n    what code needs changed on your end 

1a?) do we need to make whitelist? is a .txt acceptable? do you care where we store it? (question valid for all files)
4) login info stored in: login.txt   (?)



Tasks: 
- IP Whitelist
	- read in value and compare until read all or match
	- if valid continue, else exit  (no error messgage?)
- Username
	- read list of usernames and compare, invalid quit immediately
	- 2 attempts for password if valid username
- Password
	- use Argon2 (32 bytes)
	- add unique 16-byte salt for each user
	- pepper (optional)
	- change password by entering new password twice 
- adduser_main.cpp
	- don't touch (needs to be able to work with unmodified)
- events: log below events to server.log with time/date (to the second)
	- server statup
	- new connections on whitelist (IP)
	- new connections not on whitelist (IP)
	- recognized usernames (username and IP)
	- unrecognized usernames (username and IP)
	- users that twice failed to enter password (username, IP)
	- Successful login (username, IP)
	- disconnect(username, IP)
        
        


Main files to edit:
- PasswdMgr.cpp (hashArgon2(debug); addUser(debug); writeUser(debug); readUser(debug); changePasswd(); )
- TCPConn.cpp (change getMenuChoice(); getUsername(); getPasswd(); changePassword() )
- TCPClient.cpp (maybe figure out where whitelist confirmation is)
- TCPServer.cpp (add the logging for server statup)



Hashing process: 
1) password is sent by command line
2) password is hashed, salted, and (optionally) peppered)
3) password is stored in random file
4) user enters password which goes through same process and then is compared to hash

Misc Notes:
- password file format is (each is stored on a newline):
username\n
<password><salt>\n
- if going the tmp file way, use the mv command to rename (with hardcoded string so it is as secure as possible)
- event logger should be in TCPServer.cpp
        - make a variable in the .h to hold time 



read in password 
create own hash with salt of 16 bytes
send password in cleartext (kerberos system more secure for homework question)

Code:
/*******************************************************************************************
 * eventLogger - Logs specified events in server.log
 *
 *    Params:  event     - the event that triggered the logging
 *             ipAddress - address of whatever caused event
 *             time      - date and timestamp down to the second of the event 
 *
 *    Returns: true if successful, false if not 
 *
 *    Throws: pwfile_error if there were unanticipated problems opening the password file for
 *            writing
 *
 *******************************************************************************************/
bool eventLogger(std::string event, auto ipAddress, auto time)
{
        // craft string
        std::string entry;
        entry.assign(event);
        entry.append(ipAddress);
        entry.append(time);
        
        // open a file descriptor to write to
        std::ofstream logger("server.log"); 
        if(logger.is_open())
        {
                logger << entry << std::endl;
                logger.close();
                return true;
        }
        else
        {
                perror("Failed to open log file");
		return false; // return false because failed
        }
}





**************************************************************************************************************************************************************************************
Current issues
- Whitelist 
        - compare is not working properly
- passmgr changePasswd
        - needs implemented
- tcpconn changePasswd
        - needs implemented
- Argon2
        - suspect something wrong with a hash/salt (can't login)










